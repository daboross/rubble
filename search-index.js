var searchIndex = JSON.parse('{\
"rubble":{"doc":"An experimental BLE stack.","i":[[4,"Error","rubble","Errors returned by the BLE stack.",null,null],[13,"InvalidLength","","Packet specified an invalid length value or was too short.",0,null],[13,"InvalidValue","","Invalid value supplied for field.",0,null],[13,"Eof","","Unexpectedly reached EOF while reading or writing data.",0,null],[13,"IncompleteParse","","Parsing didn\'t consume the entire buffer.",0,null],[0,"att","","Implementation of the Attribute Protocol (ATT).",null,null],[3,"Handle","rubble::att","A 16-bit handle uniquely identifying an attribute on an…",null,null],[3,"HandleRange","","A (de)serializable handle range that has been checked for…",null,null],[3,"AttributeServer","","An Attribute Protocol server providing read and write…",null,null],[3,"AttributeServerTx","","An ATT server handle that can send packets and initiate…",null,null],[3,"Attribute","","An ATT server attribute",null,null],[12,"att_type","","The type of the attribute as a UUID16, EG \\\"Primary…",1,null],[12,"handle","","Unique server-side identifer for attribute",1,null],[12,"value","","Attribute values can be any fixed length or variable…",1,null],[3,"NoAttributes","","An empty attribute set.",null,null],[4,"AttUuid","","ATT protocol UUID (either a 16 or a 128-bit UUID).",null,null],[13,"Uuid16","","",2,null],[13,"Uuid128","","",2,null],[18,"NULL","","The `0x0000` handle is not used for actual attributes, but…",3,null],[11,"as_u16","","Returns the raw 16-bit integer representing this handle.",3,[[]]],[11,"from_raw","","Create an attribute handle from a raw u16",3,[[]]],[11,"new","","",4,[[["handle",3]]]],[11,"contains","","Checks if an Handle is in a HandleRange",4,[[["handle",3]]]],[11,"start","","Returns the lowest attribute handle value included in the…",4,[[],["handle",3]]],[11,"end","","Returns the last (highest) attribute handle value included…",4,[[],["handle",3]]],[11,"new","","Creates an `AttributeServer` hosting attributes from an…",5,[[]]],[11,"with_sender","","Prepares for performing a server-initiated action (eg.…",5,[[["sender",3]],["attributeservertx",3]]],[11,"notify_raw","","Sends an attribute value notification to the connected…",6,[[["handle",3]]]],[8,"AttributeProvider","","Trait for attribute sets that can be hosted by an…",null,null],[10,"for_attrs_in_range","","Calls a closure `f` with every attribute whose handle is…",7,[[["handlerange",3]],[["error",4],["result",4]]]],[10,"is_grouping_attr","","Returns whether `uuid` is a valid grouping attribute type…",7,[[["attuuid",4]]]],[10,"group_end","","Queries the last attribute that is part of the attribute…",7,[[["handle",3]],[["option",4],["attribute",3]]]],[11,"new","","Creates a new attribute.",1,[[["handle",3],["attuuid",4]]]],[11,"value","","Retrieves the attribute\'s value as a slice.",1,[[]]],[0,"beacon","rubble","BLE beacon support, without dealing with Link-Layer stuff.",null,null],[3,"Beacon","rubble::beacon","A BLE beacon.",null,null],[3,"BeaconScanner","","A passive scanner for non-connectable beacon advertisements.",null,null],[8,"ScanCallback","","Callback for the `BeaconScanner`.",null,null],[10,"beacon","","Called when a beacon is received and has passed the…",8,[[["deviceaddress",3]]]],[11,"new","","Creates a new beacon that will broadcast a packet on all…",9,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"broadcast","","Broadcasts the beacon data using `tx`.",9,[[]]],[11,"new","","Creates a `BeaconScanner` that will report beacons from…",10,[[]]],[11,"with_filter","","Creates a `BeaconScanner` with a custom device filter.",10,[[]]],[11,"configure","","Configures the `BeaconScanner` and returns a `Cmd` to…",10,[[["instant",3],["duration",3]],["cmd",3]]],[11,"timer_update","","Updates the `BeaconScanner` after the configured timer has…",10,[[["instant",3]],["cmd",3]]],[11,"process_adv_packet","","Processes a received advertising channel packet.",10,[[["header",3]],["cmd",3]]],[0,"bytes","rubble","Utilities for decoding from and encoding into bytes.",null,null],[3,"BytesOr","rubble::bytes","Reference to a `T`, or to a byte slice that can be decoded…",null,null],[3,"ByteWriter","","Wrapper around a byte slice that can be used to encode…",null,null],[3,"ByteReader","","Allows reading values from a borrowed byte slice.",null,null],[8,"ToBytes","","Trait for encoding a value into a byte buffer.",null,null],[10,"to_bytes","","Converts `self` to bytes and writes them into `writer`,…",11,[[["bytewriter",3]],[["error",4],["result",4]]]],[8,"FromBytes","","Trait for decoding values from a byte slice.",null,null],[10,"from_bytes","","Decode a `Self` from a byte slice, advancing `bytes` to…",12,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_ref","","Creates a `BytesOr` that holds on to a `T` via reference.",13,[[]]],[11,"read","","Reads the `T`, possibly by parsing the stored bytes.",13,[[]]],[11,"iter","","Returns an iterator over all `T`s stored in `self` (which…",13,[[]]],[11,"iter","","Returns an iterator over all `T`s stored in `self`.",13,[[]]],[11,"new","","Creates a writer that will write to `buf`.",14,[[]]],[11,"into_rest","","Consumes `self` and returns the part of the contained…",14,[[]]],[11,"rest","","Returns the raw buffer this `ByteWriter` would write to.",14,[[]]],[11,"skip","","Skips the given number of bytes in the output data without…",14,[[],[["error",4],["result",4]]]],[11,"split_off","","Creates and returns another `ByteWriter` that can write to…",14,[[],[["result",4],["error",4]]]],[11,"split_next_mut","","Splits off the next byte in the buffer.",14,[[],["option",4]]],[11,"space_left","","Returns the number of bytes that can be written to `self`…",14,[[]]],[11,"write_slice","","Writes all bytes from `other` to `self`.",14,[[],[["error",4],["result",4]]]],[11,"write_slice_truncate","","Writes as many bytes as can fit from `other` into `self`.",14,[[]]],[11,"write_u8","","Writes a single byte to `self`.",14,[[],[["error",4],["result",4]]]],[11,"write_u16_le","","Writes a `u16` to `self`, using Little Endian byte order.",14,[[],[["error",4],["result",4]]]],[11,"write_u32_le","","Writes a `u32` to `self`, using Little Endian byte order.",14,[[],[["error",4],["result",4]]]],[11,"write_u64_le","","Writes a `u64` to `self`, using Little Endian byte order.",14,[[],[["error",4],["result",4]]]],[11,"new","","Creates a new `ByteReader` that will read from the given…",15,[[]]],[11,"as_raw_bytes","","Returns a reference to the raw bytes in `self`, without…",15,[[]]],[11,"into_rest","","Consumes `self` and returns the part of the contained…",15,[[]]],[11,"skip","","Skips the given number of bytes in the input data without…",15,[[],[["error",4],["result",4]]]],[11,"split_off","","Creates and returns another `ByteReader` that will read…",15,[[],[["result",4],["error",4]]]],[11,"bytes_left","","Returns the number of bytes that can still be read from…",15,[[]]],[11,"is_empty","","Returns whether `self` is at the end of the underlying…",15,[[]]],[11,"read_slice","","Reads a byte slice of length `len` from `self`.",15,[[],[["result",4],["error",4]]]],[11,"read_array","","Reads a byte-array-like type `S` from `self`.",15,[[],[["result",4],["error",4]]]],[11,"read_rest","","Reads the remaining bytes from `self`.",15,[[]]],[11,"read_u8","","Reads a single byte from `self`.",15,[[],[["result",4],["error",4]]]],[11,"read_u16_le","","Reads a `u16` from `self`, using Little Endian byte order.",15,[[],[["result",4],["error",4]]]],[11,"read_u32_le","","Reads a `u32` from `self`, using Little Endian byte order.",15,[[],[["result",4],["error",4]]]],[11,"read_u64_le","","Reads a `u64` from `self`, using Little Endian byte order.",15,[[],[["result",4],["error",4]]]],[0,"config","rubble","Stack configuration trait.",null,null],[8,"Config","rubble::config","Trait for Rubble stack configurations.",null,null],[16,"Timer","","A time source with microsecond resolution.",16,null],[16,"Transmitter","","The BLE packet transmitter (radio).",16,null],[16,"ChannelMapper","","The L2CAP channel mapper in use.",16,null],[16,"PacketQueue","","The packet queue to use for exchanging data between the…",16,null],[0,"ecdh","rubble","Elliptic Curve Diffie-Hellman (ECDH) on P-256.",null,null],[3,"P256Provider","rubble::ecdh","An ECDH provider using the pure-Rust `p256` crate.",null,null],[3,"P256SecretKey","","A secret key generated by a [`P256Provider`].",null,null],[3,"RingProvider","","An ECDH provider that uses ring under the hood.",null,null],[3,"RingSecretKey","","A secret key generated by a [`RingProvider`].",null,null],[3,"PublicKey","","A P-256 public key (point on the curve) in uncompressed…",null,null],[12,"0","","",17,null],[3,"SharedSecret","","A shared secret resulting from an ECDH key agreement.",null,null],[12,"0","","",18,null],[3,"InvalidPublicKey","","Error returned by [`SecretKey::agree`] when the public key…",null,null],[5,"run_tests","","Runs Rubble\'s P-256 provider testsuite against `provider`.",null,[[]]],[11,"new","","Creates a new instance.",19,[[]]],[11,"new","","Creates a new `RingProvider` that uses the system\'s RNG…",20,[[]]],[8,"EcdhProvider","","Trait for ECDH providers.",null,null],[16,"SecretKey","","Provider-defined secret key type.",21,null],[10,"generate_keypair","","Generates a P-256 key pair using cryptographically strong…",21,[[]]],[8,"SecretKey","","Secret key operations required by Rubble.",null,null],[10,"agree","","Performs ECDH key agreement using an ephemeral secret key…",22,[[["publickey",3]],[["result",4],["sharedsecret",3],["invalidpublickey",3]]]],[11,"new","","Creates a new `InvalidPublicKey` error.",23,[[]]],[0,"gatt","rubble","Implementation of the Generic Attribute Profile (GATT).",null,null],[3,"BatteryServiceAttrs","rubble::gatt","A demo `AttributeProvider` that will enumerate as a…",null,null],[3,"Attributes","","",null,null],[3,"MidiServiceAttrs","","A demo `AttributeProvider` that will enumerate as a Midi…",null,null],[0,"characteristic","","",null,null],[3,"Properties","rubble::gatt::characteristic","",null,null],[3,"BatteryLevel","","",null,null],[4,"Appearance","","",null,null],[13,"Unknown","","",24,null],[13,"GenericPhone","","",24,null],[13,"GenericComputer","","",24,null],[13,"GenericWatch","","",24,null],[13,"SportsWatch","","",24,null],[13,"GenericClock","","",24,null],[13,"GenericDisplay","","",24,null],[13,"GenericRemoteControl","","",24,null],[13,"GenericEyeGlasses","","",24,null],[13,"GenericTag","","",24,null],[13,"GenericKeyring","","",24,null],[13,"GenericMediaPlayer","","",24,null],[13,"GenericBarcodeScanner","","",24,null],[13,"GenericThermometer","","",24,null],[13,"ThermometerEar","","",24,null],[13,"GenericHeartRateSensor","","",24,null],[13,"HeartRateBelt","","",24,null],[13,"GenericBloodPressure","","",24,null],[13,"BloodPressureArm","","",24,null],[13,"BloodPressureWrist","","",24,null],[13,"HumanInterfaceDevice","","",24,null],[13,"Keyboard","","",24,null],[13,"Mouse","","",24,null],[13,"Joystick","","",24,null],[13,"Gamepad","","",24,null],[13,"DigitizerTablet","","",24,null],[13,"CardReader","","",24,null],[13,"DigitalPen","","",24,null],[13,"BarcodeScanner","","",24,null],[13,"GenericGlucoseMeter","","",24,null],[13,"GenericRunningWalkingSensor","","",24,null],[13,"RunningWalkingSensorInShoe","","",24,null],[13,"RunningWalkingSensorOnShoe","","",24,null],[13,"RunningWalkingSensorOnHip","","",24,null],[13,"GenericCycling","","",24,null],[13,"CyclingComputer","","",24,null],[13,"CyclingSpeedSensor","","",24,null],[13,"CyclingCadenceSensor","","",24,null],[13,"CyclingPowerSensor","","",24,null],[13,"CyclingSpeedAndCadenceSensor","","",24,null],[13,"GenericPulseOximeter","","",24,null],[13,"PulseOximeterFingertip","","",24,null],[13,"PulseOximeterWristWorn","","",24,null],[13,"GenericWeightScale","","",24,null],[13,"GenericPersonalMobilityDevice","","",24,null],[13,"PoweredWheelchair","","",24,null],[13,"MobilityScooter","","",24,null],[13,"GenericContinuousGlucoseMonitor","","",24,null],[13,"GenericInsulinPump","","",24,null],[13,"DurableInsulinPump","","",24,null],[13,"PatchInsulingPump","","",24,null],[13,"InsulinPen","","",24,null],[13,"GenericMedicationDelivery","","",24,null],[13,"GenericOutdoorSportsActivity","","",24,null],[13,"LocationDisplayService","","",24,null],[13,"LocationAndNavigationDisplayService","","",24,null],[13,"LocationPod","","",24,null],[13,"LocationAndNavigationPod","","",24,null],[8,"Characteristic","","",null,null],[18,"PROPS","","",25,null],[18,"UUID","","The UUID assigned to the characteristic type.",25,null],[18,"BROADCAST","","",26,null],[18,"READ","","",26,null],[18,"WRITE_NO_RSP","","",26,null],[18,"WRITE","","",26,null],[18,"NOTIFY","","",26,null],[18,"INDICATE","","",26,null],[18,"AUTH_WRITES","","",26,null],[18,"EXTENDED","","",26,null],[11,"empty","","Returns an empty set of flags",26,[[],["properties",3]]],[11,"all","","Returns the set containing all flags.",26,[[],["properties",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",26,[[],[["option",4],["properties",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",26,[[],["properties",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",26,[[],["properties",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",26,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",26,[[["properties",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",26,[[["properties",3]]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["properties",3]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["properties",3]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["properties",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",26,[[["properties",3]]]],[11,"new","","",27,[[]]],[11,"percentage","","",27,[[]]],[11,"new","rubble::gatt","",28,[[]]],[11,"new","","",29,[[]]],[0,"l2cap","rubble","The Logical Link Control and Adaptation Protocol (L2CAP).",null,null],[3,"Channel","rubble::l2cap","An L2CAP channel identifier (CID).",null,null],[3,"ChannelData","","Data associated with a connected L2CAP channel.",null,null],[3,"BleChannelMap","","A fixed BLE channel map that provides only the required…",null,null],[3,"L2CAPState","","L2CAP channel manager and responder.",null,null],[3,"Sender","","Provides a way to send a L2CAP message with preallocated…",null,null],[3,"L2CAPStateTx","","An `L2CAPState` with the ability to transmit packets.",null,null],[8,"ChannelMapper","","Trait for L2CAP channel mappers that provide access to the…",null,null],[16,"AttributeProvider","","The attribute provider used by the ATT server.",30,null],[10,"lookup","","Look up what\'s connected to `channel` (eg. the `Protocol`…",30,[[["channel",3]],[["option",4],["channeldata",3]]]],[10,"att","","Returns information about the Attribute Protocol on…",30,[[],[["channeldata",3],["attributeserver",3]]]],[8,"ProtocolObj","","Trait for protocols that sit on top of L2CAP (object-safe…",null,null],[10,"process_message","","Process a message sent to the protocol.",31,[[["sender",3]],[["error",4],["result",4]]]],[8,"Protocol","","Trait for protocols that sit on top of L2CAP…",null,null],[18,"RSP_PDU_SIZE","","Minimum size needed by PDUs sent by this protocol.",32,null],[18,"NULL","","The null channel identifier. Must not be used as a…",33,null],[18,"ATT","","The channel used by the Attribute Protocol (ATT).",33,null],[18,"LE_SIGNALING","","LE L2CAP signaling channel (connectionless).",33,null],[18,"LE_SECURITY_MANAGER","","LE Security Manager channel.",33,null],[11,"as_raw","","Returns the channel identifier (CID) as a raw `u16`.",33,[[]]],[11,"is_connection_oriented","","Returns whether this channel is connection-oriented.",33,[[]]],[11,"is_connectionless","","Returns whether this channel is connectionless.",33,[[]]],[11,"response_channel","","Returns the `Channel` to which the response should be sent.",34,[[],["channel",3]]],[11,"pdu_size","","Returns the PDU size required by the protocol.",34,[[]]],[11,"protocol","","Returns the protocol connected to the channel.",34,[[]]],[11,"into_protocol","","Consumes `self` and returns the protocol connected to the…",34,[[]]],[11,"empty","","Creates a new channel map with no backing data for the…",35,[[]]],[11,"with_attributes","","",35,[[]]],[11,"new","","Creates a new L2CAP state using the given channel…",36,[[]]],[11,"tx","","Gives this instance the ability to transmit packets.",36,[[],[["producer",8],["l2capstatetx",3]]]],[11,"send","","Enqueues an L2CAP message to be sent over the data…",37,[[["tobytes",8]],[["error",4],["result",4]]]],[11,"send_with","","Enqueues an L2CAP message encoded by a closure.",37,[[],["result",4]]],[11,"process_start","","Process the start of a new L2CAP message (or a complete,…",38,[[],["consume",3]]],[11,"process_cont","","Process continuation of an L2CAP message.",38,[[],["consume",3]]],[11,"att","","Prepares for sending data using the Attribute Protocol.",38,[[],[["attributeservertx",3],["option",4]]]],[0,"link","rubble","Link-Layer.",null,null],[3,"CompanyId","rubble::link","Company identifier for use in link layer Control PDUs.",null,null],[3,"Connection","","Connection state and parameters.",null,null],[3,"DeviceAddress","","A Bluetooth device address.",null,null],[3,"FeatureSet","","A set of optional Link Layer features.",null,null],[3,"Responder","","Data channel packet processor.",null,null],[3,"LinkLayer","","Implementation of the real-time BLE Link-Layer logic.",null,null],[3,"Cmd","","Command returned by the Link-Layer to the user.",null,null],[12,"radio","","Radio configuration request.",39,null],[12,"next_update","","Time until `LinkLayer::update` should be called.",39,null],[12,"queued_work","","Whether the Link-Layer code has enqueued more work into…",39,null],[4,"AddressKind","","Specifies whether a device address is randomly generated…",null,null],[13,"Public","","Publicly registered IEEE 802-2001 LAN MAC address.",40,null],[13,"Random","","Randomly generated address.",40,null],[4,"NextUpdate","","Specifies when the Link Layer\'s `update` method should be…",null,null],[13,"Disable","","Disable timer and do not call `update`.",41,null],[13,"Keep","","Keep the previously configured time.",41,null],[13,"At","","Call `update` at the given `Instant`.",41,null],[4,"RadioCmd","","Specifies if and how the radio should listen for…",null,null],[13,"Off","","Turn the radio off and don\'t call `LinkLayer::process_*`…",42,null],[13,"ListenAdvertising","","Listen on an advertising channel. If a packet is received,…",42,null],[12,"channel","rubble::link::RadioCmd","The advertising channel to listen on.",43,null],[13,"ListenData","rubble::link","Listen on a data channel. If a matching packet is…",42,null],[12,"channel","rubble::link::RadioCmd","The data channel to listen on.",44,null],[12,"access_address","","The Access Address to listen for.",44,null],[12,"crc_init","","Initialization value of the CRC-24 calculation.",44,null],[12,"timeout","","Flag to indicate if the last connection event timed out.",44,null],[0,"ad_structure","rubble::link","Advertising Data / Extended Inquiry Response (EIR) data.",null,null],[3,"ServiceUuids","rubble::link::ad_structure","List of service UUIDs offered by the device.",null,null],[3,"Flags","","BR/EDR and LE compatibility flags.",null,null],[4,"AdStructure","","A list of AD structures can be sent along with an…",null,null],[13,"Flags","","Device flags and baseband capabilities.",45,null],[13,"ServiceUuids16","","",45,null],[13,"ServiceUuids32","","",45,null],[13,"ServiceUuids128","","",45,null],[13,"ServiceData16","","Service data with 16-bit service UUID.",45,null],[12,"uuid","rubble::link::ad_structure::AdStructure","The 16-bit service UUID.",46,null],[12,"data","","The associated service data. May be empty.",46,null],[13,"CompleteLocalName","rubble::link::ad_structure","Sets the full (unabbreviated) device name.",45,null],[13,"ShortenedLocalName","","Sets the shortened device name.",45,null],[13,"ManufacturerSpecificData","","Set manufacturer specific data",45,null],[12,"company_identifier","rubble::link::ad_structure::AdStructure","",47,null],[12,"payload","","",47,null],[13,"Unknown","rubble::link::ad_structure","An unknown or unimplemented AD structure stored as raw…",45,null],[12,"ty","rubble::link::ad_structure::AdStructure","Type byte.",48,null],[12,"data","","Raw data transmitted after the type.",48,null],[11,"from_uuids","rubble::link::ad_structure","Creates a `ServiceUuids` container from a list of UUIDs.",49,[[]]],[11,"is_complete","","Returns a boolean indicating whether this list is complete.",49,[[]]],[11,"iter","","Returns an iterator over the UUIDs stored in `self`.",49,[[]]],[18,"LE_LIMITED_DISCOVERABLE","","",50,null],[18,"LE_GENERAL_DISCOVERABLE","","",50,null],[18,"BR_EDR_NOT_SUPPORTED","","",50,null],[18,"SIMUL_LE_BR_CONTROLLER","","",50,null],[18,"SIMUL_LE_BR_HOST","","",50,null],[11,"empty","","Returns an empty set of flags",50,[[],["flags",3]]],[11,"all","","Returns the set containing all flags.",50,[[],["flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",50,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",50,[[],[["option",4],["flags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",50,[[],["flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",50,[[],["flags",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",50,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",50,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",50,[[["flags",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",50,[[["flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",50,[[["flags",3]]]],[11,"remove","","Removes the specified flags in-place.",50,[[["flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",50,[[["flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",50,[[["flags",3]]]],[11,"discoverable","","Returns flags suitable for discoverable devices that want…",50,[[],["flags",3]]],[11,"broadcast","","Returns flags suitable for non-connectable devices that…",50,[[],["flags",3]]],[11,"to_u8","","Returns the raw representation of the flags.",50,[[]]],[11,"supports_classic_bluetooth","","Returns a boolean indicating whether the device that sent…",50,[[]]],[11,"le_limited_discoverable","","Device operating in LE Limited Discoverable mode.",50,[[]]],[11,"le_general_discoverable","","Device operating in LE General Discoverable mode.",50,[[]]],[0,"advertising","rubble::link","Advertising channel operations.",null,null],[3,"ConnectRequestData","rubble::link::advertising","Connection parameters sent along with a `ConnectRequest`…",null,null],[3,"PduBuf","","Stores an advertising channel PDU.",null,null],[3,"Header","","16-bit Advertising Channel PDU header preceding the Payload.",null,null],[4,"Pdu","","A parsed advertising channel PDU.",null,null],[13,"ConnectableUndirected","","Connectable and scannable advertisement.",51,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",52,null],[12,"advertising_data","","AD structures sent along with the advertisement.",52,null],[13,"ConnectableDirected","rubble::link::advertising","Directed connectable advertisement sent to an initiator.",51,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",53,null],[12,"initiator_addr","","Intended receiver of the advertisement.",53,null],[13,"NonconnectableUndirected","rubble::link::advertising","A non-connectable undirected advertisement (aka \\\"beacon\\\").",51,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device (beacon) that is sending…",54,null],[12,"advertising_data","","AD structures sent along with the advertisement.",54,null],[13,"ScannableUndirected","rubble::link::advertising","Scannable advertisement.",51,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",55,null],[12,"advertising_data","","AD structures sent along with the advertisement.",55,null],[13,"ScanRequest","rubble::link::advertising","Scan request sent from a scanner to an advertising device.",51,null],[12,"scanner_addr","rubble::link::advertising::Pdu","Address of the scanning device sending this PDU.",56,null],[12,"advertiser_addr","","Address of the advertising device that should be scanned.",56,null],[13,"ScanResponse","rubble::link::advertising","Response to a scan request, sent by the scanned…",51,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that responds to a scan…",57,null],[12,"scan_data","","Scan data payload, consisting of additional user-defined…",57,null],[13,"ConnectRequest","rubble::link::advertising","A request to establish a connection, sent by an initiating…",51,null],[12,"initiator_addr","rubble::link::advertising::Pdu","Address of the device initiating the connection by sending…",58,null],[12,"advertiser_addr","","Address of the intended receiver of this packet.",58,null],[12,"lldata","","Connection parameters.",58,null],[4,"SleepClockAccuracy","rubble::link::advertising","Indicates the master\'s sleep clock accuracy (SCA) in ppm…",null,null],[13,"Ppm251To500","","",59,null],[13,"Ppm151To250","","",59,null],[13,"Ppm101To150","","",59,null],[13,"Ppm76To100","","",59,null],[13,"Ppm51To75","","",59,null],[13,"Ppm31To50","","",59,null],[13,"Ppm21To30","","",59,null],[13,"Ppm0To20","","",59,null],[4,"PduType","","4-bit PDU type in [`Header`].",null,null],[13,"AdvInd","","Connectable undirected advertising event (`ADV_IND`).",60,null],[13,"AdvDirectInd","","Connectable directed advertising event (`ADV_DIRECT_IND`).",60,null],[13,"AdvNonconnInd","","Non-connectable undirected advertising event…",60,null],[13,"AdvScanInd","","Scannable undirected advertising event (`ADV_SCAN_IND`).",60,null],[13,"ScanReq","","Scan request (`SCAN_REQ`).",60,null],[13,"ScanRsp","","Scan response (`SCAN_RSP`).",60,null],[13,"ConnectReq","","Connect request (`CONNECT_REQ`).",60,null],[13,"Unknown","","",60,null],[17,"CRC_PRESET","","CRC initialization value for advertising channel packets.",null,null],[17,"MAX_PAYLOAD_SIZE","","Max. advertising PDU payload size in Bytes.",null,null],[17,"ACCESS_ADDRESS","","Access Address to use for all advertising channel packets.",null,null],[11,"from_header_and_payload","","Constructs a PDU by parsing `payload`.",51,[[["header",3],["bytereader",3]],[["result",4],["error",4]]]],[11,"sender","","Returns the device address of the sender of this PDU.",51,[[],["deviceaddress",3]]],[11,"receiver","","Returns the intended receiver of this PDU.",51,[[],[["deviceaddress",3],["option",4]]]],[11,"ty","","Returns the PDU type of `self`.",51,[[],["pdutype",4]]],[11,"advertising_data","","Returns an iterator over all AD structures encoded in the…",51,[[],["option",4]]],[11,"access_address","","Returns the Access Address to use for data channel…",61,[[]]],[11,"crc_init","","Returns the initialization value for the CRC calculation.",61,[[]]],[11,"channel_map","","Returns the channel map specified by the initiator.",61,[[],["channelmap",3]]],[11,"hop","","Returns the channel hop distance.",61,[[]]],[11,"end_of_tx_window","","Returns the end of the transmit window from reception of…",61,[[],["duration",3]]],[11,"interval","","Returns the connection event interval in µs.",61,[[],["duration",3]]],[11,"slave_latency","","Returns the slave latency (as the number of connection…",61,[[]]],[11,"supervision_timeout","","Returns the connection supervision timeout…",61,[[],["duration",3]]],[11,"connectable_undirected","","Creates a connectable undirected advertising PDU…",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"connectable_directed","","Creates a connectable directed advertising PDU…",62,[[["deviceaddress",3]]]],[11,"nonconnectable_undirected","","Creates a non-connectable undirected advertising PDU…",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"scannable_undirected","","Creates a scannable undirected advertising PDU…",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"beacon","","Creates an advertising channel PDU suitable for building a…",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"discoverable","","Creates an advertising PDU that makes this device…",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"scan_request","","Creates a scan request PDU.",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"scan_response","","Creates a scan response PDU.",62,[[["deviceaddress",3]],[["result",4],["error",4]]]],[11,"header","","",62,[[],["header",3]]],[11,"payload","","",62,[[]]],[11,"new","","Creates a new Advertising Channel PDU header specifying…",63,[[["pdutype",4]]]],[11,"parse","","",63,[[]]],[11,"to_u16","","Returns the raw representation of the header.",63,[[]]],[11,"type_","","Returns the PDU type specified in the header.",63,[[],["pdutype",4]]],[11,"tx_add","","Returns the state of the `TxAdd` field.",63,[[]]],[11,"set_tx_add","","Sets the `TxAdd` field\'s value.",63,[[]]],[11,"rx_add","","Returns the state of the `RxAdd` field.",63,[[]]],[11,"set_rx_add","","Sets the `RxAdd` field\'s value.",63,[[]]],[11,"payload_length","","Returns the length of the payload in octets as specified…",63,[[]]],[11,"set_payload_length","","Sets the payload length of this PDU.",63,[[]]],[11,"is_beacon","","Returns whether this PDU type is a beacon advertisement.",60,[[]]],[11,"allows_adv_data","","Whether AD structures can follow the fixed data in a PDU…",60,[[]]],[11,"from_raw","rubble::link","Create a company ID from a raw `u16`.",64,[[]]],[11,"as_u16","","Get the raw `u16` representing this company identifier.",64,[[]]],[11,"name","","Get the full company name from this identifer.",64,[[],["option",4]]],[11,"connection_interval","","Returns the configured interval between connection events.",65,[[],["duration",3]]],[0,"data","","Data Channel structures.",null,null],[3,"Header","rubble::link::data","16-bit data channel header preceding the payload.",null,null],[4,"Llid","","Values of the LLID field in `Header`.",null,null],[13,"Reserved","","Reserved for future use.",66,null],[13,"DataCont","","Continuation of L2CAP message, or empty PDU.",66,null],[13,"DataStart","","Start of L2CAP message.",66,null],[13,"Control","","LL control PDU.",66,null],[4,"Pdu","","Structured representation of a data channel PDU.",null,null],[13,"DataCont","","Continuation of an L2CAP message (or empty PDU).",67,null],[12,"message","rubble::link::data::Pdu","",68,null],[13,"DataStart","rubble::link::data","Start of an L2CAP message (must not be empty).",67,null],[12,"message","rubble::link::data::Pdu","",69,null],[13,"Control","rubble::link::data","LL Control PDU for controlling the Link-Layer connection.",67,null],[12,"data","rubble::link::data::Pdu","",70,null],[11,"new","rubble::link::data","Creates a header with the given LLID field and all other…",71,[[["llid",4]]]],[11,"parse","","Parses a header from raw bytes.",71,[[]]],[11,"to_u16","","Returns the raw representation of the header.",71,[[]]],[11,"payload_length","","Returns the length of the payload in octets as specified…",71,[[]]],[11,"set_payload_length","","Sets the payload length field to `len`.",71,[[]]],[11,"llid","","Returns the `LLID` field (PDU type).",71,[[],["llid",4]]],[11,"nesn","","Returns the value of the `NESN` field (Next Expected…",71,[[],["seqnum",3]]],[11,"set_nesn","","Sets the value of the `NESN` field.",71,[[["seqnum",3]]]],[11,"sn","","Returns the value of the `SN` field (Sequence Number).",71,[[],["seqnum",3]]],[11,"set_sn","","Sets the value of the `SN` field.",71,[[["seqnum",3]]]],[11,"md","","Returns whether the `MD` field is set (More Data).",71,[[]]],[11,"set_md","","Sets the value of the `MD` field.",71,[[]]],[11,"empty","","Creates an empty PDU that carries no message.",67,[[]]],[11,"llid","","Returns the `LLID` field to use for this PDU.",67,[[],["llid",4]]],[11,"parse","","Parses a PDU from a `Header` and raw payload.",67,[[["header",3]],[["result",4],["error",4]]]],[11,"new","rubble::link","Create a new device address from 6 raw Bytes and an…",72,[[["addresskind",4]]]],[11,"kind","","Returns the address kind.",72,[[],["addresskind",4]]],[11,"is_random","","Returns whether this address is randomly generated.",72,[[]]],[11,"raw","","Returns the raw bytes making up this address (LSB first).",72,[[]]],[18,"LE_ENCRYPTION","","Low-Energy data encryption.",73,null],[18,"CONN_PARAM_REQ","","Connection parameters request procedure.",73,null],[18,"EXTENDED_REJECT_INDICATION","","Support for the LL Control PDU `LL_REJECT_IND_EXT`.",73,null],[18,"SLAVE_FEATURE_EXCHANGE","","Slave-initiated feature exchange.",73,null],[18,"LE_PING","","Low-Energy Link-Layer ping exchange.",73,null],[18,"LE_PACKET_LENGTH_EXTENSION","","Link-Layer PDU length update (support for data channel…",73,null],[18,"LL_PRIVACY","","Support for untrackable randomized device addresses (LL…",73,null],[18,"EXT_SCANNER_FILTER_POLICIES","","Extended scan filter policies.",73,null],[11,"empty","","Returns an empty set of flags",73,[[],["featureset",3]]],[11,"all","","Returns the set containing all flags.",73,[[],["featureset",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",73,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",73,[[],[["option",4],["featureset",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",73,[[],["featureset",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",73,[[],["featureset",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",73,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",73,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",73,[[["featureset",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",73,[[["featureset",3]]]],[11,"insert","","Inserts the specified flags in-place.",73,[[["featureset",3]]]],[11,"remove","","Removes the specified flags in-place.",73,[[["featureset",3]]]],[11,"toggle","","Toggles the specified flags in-place.",73,[[["featureset",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",73,[[["featureset",3]]]],[11,"supported","","Returns the feature set supported by Rubble.",73,[[]]],[0,"filter","","Link-Layer Device Filtering.",null,null],[3,"AllowAll","rubble::link::filter","An `AddressFilter` that allows all devices (ie. no…",null,null],[3,"WhitelistFilter","","An `AddressFilter` that checks device addresses against a…",null,null],[3,"AdvFilter","","Advertising filter policy. Governs which devices may scan…",null,null],[3,"ScanFilter","","Scanner filter policy. Governs which devices will be…",null,null],[6,"SliceIter","","",null,null],[6,"SingleIter","","",null,null],[8,"AddressFilter","","",null,null],[10,"matches","","",74,[[["deviceaddress",3]]]],[11,"new","","Creates a device whitelist from an iterator yielding the…",75,[[]]],[11,"from_slice","","Creates a device whitelist from a slice of device addresses.",75,[[]]],[11,"from_address","","Creates a device whitelist that will allow a single device.",75,[[["deviceaddress",3]]]],[11,"new","","Creates a new filter policy from behaviors for scan and…",76,[[]]],[11,"may_scan","","",76,[[["deviceaddress",3]]]],[11,"may_connect","","",76,[[["deviceaddress",3]]]],[11,"new","","Creates a new scanner filter policy from an `AddressFilter`.",77,[[]]],[11,"should_scan","","",77,[[["deviceaddress",3]]]],[0,"llcp","rubble::link","Defines packet structures used by the Link Layer Control…",null,null],[3,"ConnectionParamRequest","rubble::link::llcp","A connection parameter update request or response…",null,null],[3,"ConnectionUpdateData","","Data transmitted with an `LL_CONNECTION_UPDATE_REQ`…",null,null],[4,"ControlPdu","","A structured representation of an LL Control PDU used by…",null,null],[13,"ConnectionUpdateReq","","`0x00`/`LL_CONNECTION_UPDATE_REQ` - Update connection…",78,null],[13,"ChannelMapReq","","`0x01`/`LL_CHANNEL_MAP_REQ` - Update the channel map.",78,null],[12,"map","rubble::link::llcp::ControlPdu","",79,null],[12,"instant","","",79,null],[13,"TerminateInd","rubble::link::llcp","`0x02`/`LL_TERMINATE_IND` - Close the connection.",78,null],[12,"error_code","rubble::link::llcp::ControlPdu","",80,null],[13,"UnknownRsp","rubble::link::llcp","`0x07`/`LL_UNKNOWN_RSP` - Response to unknown/unsupported…",78,null],[12,"unknown_type","rubble::link::llcp::ControlPdu","Opcode of the unknown PDU.",81,null],[13,"FeatureReq","rubble::link::llcp","`0x08`/`LL_FEATURE_REQ` - Master requests slave\'s features.",78,null],[12,"features_master","rubble::link::llcp::ControlPdu","Supported feature set of the master.",82,null],[13,"FeatureRsp","rubble::link::llcp","`0x09`/`LL_FEATURE_RSP` - Slave answers `LL_FEATURE_REQ`…",78,null],[12,"features_used","rubble::link::llcp::ControlPdu","Features that will be used for the connection. Logical…",83,null],[13,"VersionInd","rubble::link::llcp","`0x0C`/`LL_VERSION_IND` - Bluetooth version indication…",78,null],[12,"vers_nr","rubble::link::llcp::ControlPdu","",84,null],[12,"comp_id","","",84,null],[12,"sub_vers_nr","","",84,null],[13,"ConnectionParamReq","rubble::link::llcp","",78,null],[13,"ConnectionParamRsp","","",78,null],[13,"Unknown","","Catch-all variant for unsupported opcodes.",78,null],[12,"opcode","rubble::link::llcp::ControlPdu","The opcode we don\'t support. This can also be the…",85,null],[12,"ctr_data","","Additional data depending on the opcode.",85,null],[4,"ControlOpcode","rubble::link::llcp","Enumeration of all known LL Control PDU opcodes (not all…",null,null],[13,"ConnectionUpdateReq","","",86,null],[13,"ChannelMapReq","","",86,null],[13,"TerminateInd","","",86,null],[13,"EncReq","","",86,null],[13,"EncRsp","","",86,null],[13,"StartEncReq","","",86,null],[13,"StartEncRsp","","",86,null],[13,"UnknownRsp","","",86,null],[13,"FeatureReq","","",86,null],[13,"FeatureRsp","","",86,null],[13,"PauseEncReq","","",86,null],[13,"PauseEncRsp","","",86,null],[13,"VersionInd","","",86,null],[13,"RejectInd","","",86,null],[13,"SlaveFeatureReq","","",86,null],[13,"ConnectionParamReq","","",86,null],[13,"ConnectionParamRsp","","",86,null],[13,"RejectIndExt","","",86,null],[13,"PingReq","","",86,null],[13,"PingRsp","","",86,null],[13,"LengthReq","","",86,null],[13,"LengthRsp","","",86,null],[13,"Unknown","","",86,null],[4,"VersionNumber","","Enumeration of all possible `VersNr` for `LL_VERSION_IND`…",null,null],[13,"V4_0","","",87,null],[13,"V4_1","","",87,null],[13,"V4_2","","",87,null],[13,"V5_0","","",87,null],[13,"V5_1","","",87,null],[13,"Unknown","","",87,null],[11,"new","","Creates a new connection update request structure filled…",88,[[]]],[11,"set_conn_interval","","Sets the minimum and maximum requested connection interval.",88,[[["duration",3]]]],[11,"min_conn_interval","","Returns the minimum requested connection interval.",88,[[],["duration",3]]],[11,"max_conn_interval","","Returns the maximum requested connection interval.",88,[[],["duration",3]]],[11,"slave_latency","","Returns the slave latency in number of connection events.",88,[[]]],[11,"supervision_timeout","","Returns the supervision timeout.",88,[[],["duration",3]]],[11,"win_size","","Returns the size of the transmit window for the first PDU…",89,[[],["duration",3]]],[11,"win_offset","","Returns the offset of the transmit window, as a duration…",89,[[],["duration",3]]],[11,"interval","","Returns the duration between connection events.",89,[[],["duration",3]]],[11,"latency","","Returns the slave latency.",89,[[]]],[11,"timeout","","Returns the connection supervision timeout…",89,[[],["duration",3]]],[11,"instant","","Returns the instant at which these changes should take…",89,[[]]],[11,"opcode","","Returns the opcode of this LL Control PDU.",78,[[],["controlopcode",4]]],[11,"encoded_size","","Returns the encoded size of this LLCPDU, including the…",78,[[]]],[0,"queue","rubble::link","An SPSC queue for data channel PDUs.",null,null],[3,"Consume","rubble::link::queue","Bundles a `T` along with information telling a queue…",null,null],[3,"SimpleQueue","","A simple packet queue that can hold a single packet.",null,null],[3,"SimpleProducer","","Producer (writer) half returned by `SimpleQueue::split`.",null,null],[3,"SimpleConsumer","","Consumer (reader) half returned by `SimpleQueue::split`.",null,null],[5,"run_tests","","Runs Rubble\'s packet queue testsuite against the given…",null,[[]]],[8,"PacketQueue","","A splittable SPSC queue for data channel PDUs.",null,null],[16,"Producer","","Producing (writing) half of the queue.",90,null],[16,"Consumer","","Consuming (reading) half of the queue.",90,null],[10,"split","","Splits the queue into its producing and consuming ends.",90,[[]]],[8,"Producer","","The producing (writing) half of a packet queue.",null,null],[10,"free_space","","Returns the largest payload size that can be successfully…",91,[[]]],[10,"produce_dyn","","Enqueues a PDU with known size using a closure.",91,[[["fnmut",8]],[["error",4],["result",4]]]],[11,"produce_with","","Enqueues a PDU with known size using a closure.",91,[[],["result",4]]],[8,"Consumer","","The consuming (reading) half of a packet queue.",null,null],[10,"has_data","","Returns whether there is a packet to dequeue.",92,[[]]],[10,"consume_raw_with","","Passes the next raw packet in the queue to a closure.",92,[[],[["error",4],["result",4]]]],[11,"consume_pdu_with","","Passes the next packet in the queue to a closure.",92,[[],[["error",4],["result",4]]]],[11,"new","","Consume the currently processed packet iff `consume` is…",93,[[["result",4],["error",4]]]],[11,"always","","Consume the currently processed packet, then return…",93,[[["result",4],["error",4]]]],[11,"never","","Do not consume the currently processed packet, then return…",93,[[["result",4],["error",4]]]],[11,"on_success","","Consume the currently processed packet if `result`…",93,[[["result",4],["error",4]]]],[11,"should_consume","","Retrieves whether the packet should be removed from the…",93,[[]]],[11,"result","","Retrieves a reference to the inner result.",93,[[],["result",4]]],[11,"into_result","","Unwraps this `consume`, retrieving the inner result.",93,[[],[["result",4],["error",4]]]],[11,"new","","Creates a new, empty queue.",94,[[]]],[11,"new","rubble::link","Creates a new packet processor hooked up to data channel…",95,[[["l2capstate",3]]]],[11,"has_work","","Returns `true` when this responder has work to do.",95,[[]]],[11,"process_one","","Processes a single incoming packet in the packet queue.",95,[[],[["error",4],["result",4]]]],[11,"l2cap","","Obtains access to the L2CAP instance.",95,[[],["l2capstatetx",3]]],[17,"CRC_POLY","","The CRC polynomial to use for CRC24 generation.",null,null],[17,"MIN_DATA_PAYLOAD_BUF","","Min. size a data PDU payload buffer must have (assuming…",null,null],[17,"MIN_DATA_PDU_BUF","","Min. size a data PDU buffer must have.",null,null],[17,"MIN_PAYLOAD_BUF","","Min. size a PDU payload buffer must have (to cover both…",null,null],[17,"MIN_PDU_BUF","","Min. size a Link-Layer PDU buffer must have (to cover both…",null,null],[17,"MIN_PACKET_BUF","","Min. size a buffer for Link-Layer packets must have to…",null,null],[8,"Transmitter","","Trait for Link Layer packet transmission.",null,null],[10,"tx_payload_buf","","Get a reference to the Transmitter\'s PDU payload buffer.",96,[[]]],[10,"transmit_advertising","","Transmit an Advertising Channel PDU.",96,[[["advertisingchannel",3],["header",3]]]],[10,"transmit_data","","Transmit a Data Channel PDU.",96,[[["datachannel",3],["header",3]]]],[11,"new","","Creates a new Link-Layer.",97,[[["deviceaddress",3]]]],[11,"timer","","Returns a reference to the timer instance used by the…",97,[[]]],[11,"start_advertise","","Starts advertising this device, optionally sending data…",97,[[["duration",3]],[["error",4],["nextupdate",4],["result",4]]]],[11,"process_adv_packet","","Process an incoming packet from an advertising channel.",97,[[["instant",3],["header",3]],["cmd",3]]],[11,"process_data_packet","","Process an incoming data channel packet.",97,[[["instant",3],["header",3]],["cmd",3]]],[11,"update_timer","","Update the Link-Layer state after the timer expires.",97,[[],["cmd",3]]],[11,"connection","","Returns a reference to the connection state.",97,[[],[["connection",3],["option",4]]]],[11,"is_advertising","","Returns whether the Link-Layer is currently broadcasting…",97,[[]]],[11,"is_connected","","Returns whether the Link-Layer is currently connected.",97,[[]]],[0,"phy","rubble","Physical layer interactions.",null,null],[3,"AdvertisingChannel","rubble::phy","One of the three advertising channels (channel indices 37,…",null,null],[3,"DataChannel","","One of 37 data channels on which data channel PDUs are…",null,null],[8,"Radio","","Trait for raw 2.4 GHz non-BLE-specific radios.",null,null],[10,"transmit","","Transmit every Byte in `buf` over the air, LSb first, at…",98,[[]]],[11,"first","","Returns the first (lowest-numbered) advertising channel.",99,[[]]],[11,"iter_all","","Returns an iterator that yields all 3 advertising channels…",99,[[]]],[11,"cycle","","Returns the next advertising channel, or the first one if…",99,[[]]],[11,"channel","","Returns the channel index.",99,[[]]],[11,"rf_channel","","Returns the physical RF channel corresponding to this…",99,[[]]],[11,"freq","","Returns the center frequency of this channel in MHz.",99,[[]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data…",99,[[]]],[11,"new","","Creates a `DataChannel` from a raw index.",100,[[]]],[11,"index","","Returns the data channel index.",100,[[]]],[11,"rf_channel","","Returns the RF channel corresponding to this data channel…",100,[[]]],[11,"freq","","Returns the center frequency of this channel in MHz.",100,[[]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data…",100,[[]]],[0,"security","rubble","The LE Security Manager protocol.",null,null],[3,"NoSecurity","rubble::security","LE Secure Connections are not supported and will not be…",null,null],[3,"SecureConnections","","Indicates support for LE Secure Connections.",null,null],[3,"SecurityManager","","The LE Security Manager.",null,null],[3,"AuthReq","","Authentication requirements exchanged during pairing…",null,null],[3,"KeyDistribution","","Indicates which types of keys a device requests for…",null,null],[4,"IoCapabilities","","Describes the I/O capabilities of a device that can be…",null,null],[13,"DisplayOnly","","Device can display a 6-digit number, but has no input…",101,null],[13,"DisplayYesNo","","Device can display a 6-digit number and the user can input…",101,null],[13,"KeyboardOnly","","Device does not have output capability, but the user can…",101,null],[13,"NoInputNoOutput","","Device has no meaningful input and output capabilities.",101,null],[13,"KeyboardDisplay","","Device can display a 6-digit passcode and allows passcode…",101,null],[13,"Unknown","","",101,null],[4,"BondingType","","Whether to perform bonding in addition to pairing.",null,null],[13,"NoBonding","","No bonding should be performed; the exchanged keys should…",102,null],[13,"Bonding","","Permanently store the exchanged keys to allow resuming…",102,null],[13,"Unknown","","",102,null],[8,"SecurityLevel","","Supported security levels.",null,null],[18,"MTU","","The L2CAP MTU required by this security level.",103,null],[11,"no_security","","",104,[[]]],[11,"bonding_type","","Returns the requested bonding.",105,[[],["bondingtype",4]]],[11,"set_bonding_type","","",105,[[["bondingtype",4]]]],[11,"mitm","","Returns whether MITM protection is requested.",105,[[]]],[11,"set_mitm","","",105,[[]]],[11,"secure_connection","","Returns whether LE Secure Connection pairing is supported…",105,[[]]],[11,"set_secure_connection","","Sets whether LE Secure Connection pairing is supported and…",105,[[]]],[11,"keypress","","",105,[[]]],[11,"set_keypress","","",105,[[]]],[18,"ENC_KEY","","",106,null],[18,"ID_KEY","","",106,null],[18,"SIGN_KEY","","",106,null],[18,"LINK_KEY","","",106,null],[11,"empty","","Returns an empty set of flags",106,[[],["keydistribution",3]]],[11,"all","","Returns the set containing all flags.",106,[[],["keydistribution",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",106,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",106,[[],[["option",4],["keydistribution",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",106,[[],["keydistribution",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",106,[[],["keydistribution",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",106,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",106,[[["keydistribution",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",106,[[["keydistribution",3]]]],[11,"insert","","Inserts the specified flags in-place.",106,[[["keydistribution",3]]]],[11,"remove","","Removes the specified flags in-place.",106,[[["keydistribution",3]]]],[11,"toggle","","Toggles the specified flags in-place.",106,[[["keydistribution",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",106,[[["keydistribution",3]]]],[0,"time","rubble","Time APIs for obtaining the current time and calculating…",null,null],[3,"Duration","rubble::time","A duration with microsecond resolution.",null,null],[3,"Instant","","A point in time, relative to an unspecfied epoch.",null,null],[8,"Timer","","Trait for time providers.",null,null],[10,"now","","Obtain the current time as an `Instant`.",107,[[],["instant",3]]],[18,"T_IFS","","The duration of the interframe spacing between BLE packets.",108,null],[11,"from_micros","","Creates a `Duration` from a number of microseconds.",108,[[]]],[11,"from_millis","","Creates a `Duration` representing the given number of…",108,[[]]],[11,"from_secs","","Creates a `Duration` representing a number of seconds.",108,[[]]],[11,"whole_secs","","Returns the number of whole seconds that fit in `self`.",108,[[]]],[11,"whole_millis","","Returns the number of whole milliseconds that fit in `self`.",108,[[]]],[11,"as_micros","","Returns the number of microseconds represented by `self`.",108,[[]]],[11,"subsec_micros","","Returns the fractional part of microseconds in `self`.",108,[[]]],[18,"MAX_TIME_BETWEEN","","The maximum time between two `Instant`s that can be…",109,null],[11,"from_raw_micros","","Creates an `Instant` from raw microseconds since an…",109,[[]]],[11,"raw_micros","","Returns the raw value from which this `Instant` was created.",109,[[]]],[11,"duration_since","","Calculates the duration of time that has passed between…",109,[[["instant",3]],["duration",3]]],[0,"uuid","rubble","BLE UUIDs (16, 32 or 128 bits).",null,null],[3,"Uuid16","rubble::uuid","A 16-bit UUID alias.",null,null],[12,"0","","",110,null],[3,"Uuid32","","A 32-bit UUID alias.",null,null],[12,"0","","",111,null],[3,"Uuid128","","A full 128-bit UUID.",null,null],[4,"UuidKind","","List of the supported UUID types.",null,null],[13,"Uuid16","","",112,null],[13,"Uuid32","","",112,null],[13,"Uuid128","","",112,null],[8,"IsUuid","","Marker for UUID types.",null,null],[18,"KIND","","",113,null],[11,"from_bytes","","Creates a 128-bit UUID from 16 raw bytes (encoded in…",114,[[]]],[17,"BLUETOOTH_VERSION","rubble","Version of the Bluetooth specification implemented by…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","rubble::att","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","rubble::beacon","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","rubble::bytes","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"from","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","rubble::ecdh","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"to_string","","",23,[[],["string",3]]],[11,"from","rubble::gatt","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into_iter","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"into","","",118,[[]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","rubble::gatt::characteristic","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"from","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"from","rubble::l2cap","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","rubble::link","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"from","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"to_string","","",72,[[],["string",3]]],[11,"from","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"from","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"from","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"from","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"from","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"from","rubble::link::ad_structure","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"from","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"from","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"from","rubble::link::advertising","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"from","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"from","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"from","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"from","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","rubble::link::data","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"from","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"from","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","rubble::link::filter","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","rubble::link::llcp","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"from","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"into","","",89,[[]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"from","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"from","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"from","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"from","rubble::link::queue","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","rubble::phy","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"from","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"into","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"from","rubble::security","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"into","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"into","","",123,[[]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"into","","",105,[[]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"from","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"from","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"from","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"from","rubble::time","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"to_string","","",108,[[],["string",3]]],[11,"from","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"into","","",109,[[]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"to_string","","",109,[[],["string",3]]],[11,"from","rubble::uuid","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"from","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"from","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"from","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"for_attrs_in_range","rubble::att","",115,[[["handlerange",3]],[["error",4],["result",4]]]],[11,"is_grouping_attr","","",115,[[["attuuid",4]]]],[11,"group_end","","",115,[[["handle",3]],[["option",4],["attribute",3]]]],[11,"for_attrs_in_range","rubble::gatt","",28,[[["handlerange",3]],[["error",4],["result",4]]]],[11,"is_grouping_attr","","",28,[[["attuuid",4]]]],[11,"group_end","","",28,[[["handle",3]],[["option",4],["attribute",3]]]],[11,"for_attrs_in_range","","",29,[[["handlerange",3]],[["error",4],["result",4]]]],[11,"is_grouping_attr","","",29,[[["attuuid",4]]]],[11,"group_end","","",29,[[["handle",3]],[["option",4],["attribute",3]]]],[11,"to_bytes","rubble::att","",3,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",2,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::bytes","",13,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::l2cap","",33,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::ad_structure","Lowers this AD structure into a Byte buffer.",45,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",49,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::advertising","",63,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::data","",71,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",67,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link","",73,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::link::llcp","",88,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",78,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","rubble::uuid","",110,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",111,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"to_bytes","","",114,[[["bytewriter",3]],[["error",4],["result",4]]]],[11,"from_bytes","rubble::att","",3,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",2,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::bytes","",13,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",13,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::l2cap","",33,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::link::ad_structure","",45,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",49,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::link::advertising","",51,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",61,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",63,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::link::data","",71,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::link","",73,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::link::llcp","",88,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",78,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","rubble::uuid","",110,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",111,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"from_bytes","","",114,[[["bytereader",3]],[["result",4],["error",4]]]],[11,"generate_keypair","rubble::ecdh","",19,[[]]],[11,"generate_keypair","","",20,[[]]],[11,"agree","","",116,[[["publickey",3]],[["result",4],["sharedsecret",3],["invalidpublickey",3]]]],[11,"agree","","",117,[[["publickey",3]],[["result",4],["sharedsecret",3],["invalidpublickey",3]]]],[11,"lookup","rubble::l2cap","",35,[[["channel",3]],[["option",4],["channeldata",3]]]],[11,"att","","",35,[[],[["channeldata",3],["attributeserver",3]]]],[11,"process_message","rubble::att","",5,[[["sender",3]],[["error",4],["result",4]]]],[11,"process_message","rubble::security","",104,[[["sender",3]],[["error",4],["result",4]]]],[11,"matches","rubble::link::filter","",119,[[["deviceaddress",3]]]],[11,"matches","","",75,[[["deviceaddress",3]]]],[11,"free_space","rubble::link::queue","",120,[[]]],[11,"produce_dyn","","",120,[[["fnmut",8]],[["error",4],["result",4]]]],[11,"has_data","","",121,[[]]],[11,"consume_raw_with","","",121,[[],[["error",4],["result",4]]]],[11,"deref","rubble::l2cap","",38,[[]]],[11,"deref_mut","","",38,[[]]],[11,"from","rubble::att","",2,[[["uuid16",3]]]],[11,"from","","",2,[[["uuid32",3]]]],[11,"from","","",2,[[["uuid128",3]]]],[11,"from","rubble::bytes","",13,[[]]],[11,"from","rubble::link::ad_structure","",45,[[["flags",3]]]],[11,"from","rubble::link::advertising","",60,[[]]],[11,"from","rubble::link::data","",67,[[["controlpdu",4]]]],[11,"from","rubble::link::llcp","",86,[[]]],[11,"from","","",87,[[]]],[11,"from","rubble::security","",101,[[]]],[11,"from","","",102,[[]]],[11,"from","rubble::uuid","",111,[[["uuid16",3]]]],[11,"from","","",114,[[["uuid16",3]]]],[11,"from","","",114,[[["uuid32",3]]]],[11,"fmt","rubble::att","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::bytes","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::ecdh","",23,[[["formatter",3]],["result",6]]],[11,"fmt","rubble","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::l2cap","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::advertising","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",64,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::data","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::llcp","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::queue","",93,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::phy","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::time","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::uuid","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::ecdh","",23,[[["formatter",3]],["result",6]]],[11,"fmt","rubble","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",72,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::time","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"sub","rubble::gatt::characteristic","Returns the set difference of the two sets of flags.",26,[[["properties",3]],["properties",3]]],[11,"sub","rubble::link::ad_structure","Returns the set difference of the two sets of flags.",50,[[["flags",3]],["flags",3]]],[11,"sub","rubble::link","Returns the set difference of the two sets of flags.",73,[[["featureset",3]],["featureset",3]]],[11,"sub","rubble::security","Returns the set difference of the two sets of flags.",106,[[["keydistribution",3]],["keydistribution",3]]],[11,"sub","rubble::time","",108,[[]]],[11,"sub","","",108,[[]]],[11,"sub","","",109,[[],["duration",3]]],[11,"sub","","",109,[[["duration",3]]]],[11,"eq","rubble::att","",3,[[["handle",3]]]],[11,"ne","","",3,[[["handle",3]]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[["uuid16",3]]]],[11,"eq","","",2,[[["uuid128",3]]]],[11,"eq","rubble","",0,[[["error",4]]]],[11,"eq","rubble::gatt::characteristic","",26,[[["properties",3]]]],[11,"ne","","",26,[[["properties",3]]]],[11,"eq","","",24,[[["appearance",4]]]],[11,"eq","rubble::l2cap","",33,[[["channel",3]]]],[11,"ne","","",33,[[["channel",3]]]],[11,"eq","rubble::link::ad_structure","",50,[[["flags",3]]]],[11,"ne","","",50,[[["flags",3]]]],[11,"eq","rubble::link::advertising","",60,[[["pdutype",4]]]],[11,"ne","","",60,[[["pdutype",4]]]],[11,"eq","rubble::link::data","",66,[[["llid",4]]]],[11,"eq","rubble::link","",40,[[["addresskind",4]]]],[11,"eq","","",72,[[["deviceaddress",3]]]],[11,"ne","","",72,[[["deviceaddress",3]]]],[11,"eq","","",73,[[["featureset",3]]]],[11,"ne","","",73,[[["featureset",3]]]],[11,"eq","rubble::link::llcp","",86,[[["controlopcode",4]]]],[11,"ne","","",86,[[["controlopcode",4]]]],[11,"eq","","",87,[[["versionnumber",4]]]],[11,"ne","","",87,[[["versionnumber",4]]]],[11,"eq","rubble::phy","",100,[[["datachannel",3]]]],[11,"ne","","",100,[[["datachannel",3]]]],[11,"eq","rubble::security","",106,[[["keydistribution",3]]]],[11,"ne","","",106,[[["keydistribution",3]]]],[11,"eq","rubble::time","",108,[[["duration",3]]]],[11,"ne","","",108,[[["duration",3]]]],[11,"eq","rubble::uuid","",110,[[["uuid16",3]]]],[11,"ne","","",110,[[["uuid16",3]]]],[11,"eq","","",111,[[["uuid32",3]]]],[11,"ne","","",111,[[["uuid32",3]]]],[11,"eq","","",114,[[["uuid128",3]]]],[11,"ne","","",114,[[["uuid128",3]]]],[11,"cmp","rubble::gatt::characteristic","",26,[[["properties",3]],["ordering",4]]],[11,"cmp","rubble::link::ad_structure","",50,[[["flags",3]],["ordering",4]]],[11,"cmp","rubble::link","",73,[[["featureset",3]],["ordering",4]]],[11,"cmp","rubble::security","",106,[[["keydistribution",3]],["ordering",4]]],[11,"cmp","rubble::time","",108,[[["duration",3]],["ordering",4]]],[11,"partial_cmp","rubble::gatt::characteristic","",26,[[["properties",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["properties",3]]]],[11,"le","","",26,[[["properties",3]]]],[11,"gt","","",26,[[["properties",3]]]],[11,"ge","","",26,[[["properties",3]]]],[11,"partial_cmp","rubble::link::ad_structure","",50,[[["flags",3]],[["option",4],["ordering",4]]]],[11,"lt","","",50,[[["flags",3]]]],[11,"le","","",50,[[["flags",3]]]],[11,"gt","","",50,[[["flags",3]]]],[11,"ge","","",50,[[["flags",3]]]],[11,"partial_cmp","rubble::link","",73,[[["featureset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",73,[[["featureset",3]]]],[11,"le","","",73,[[["featureset",3]]]],[11,"gt","","",73,[[["featureset",3]]]],[11,"ge","","",73,[[["featureset",3]]]],[11,"partial_cmp","rubble::security","",106,[[["keydistribution",3]],[["option",4],["ordering",4]]]],[11,"lt","","",106,[[["keydistribution",3]]]],[11,"le","","",106,[[["keydistribution",3]]]],[11,"gt","","",106,[[["keydistribution",3]]]],[11,"ge","","",106,[[["keydistribution",3]]]],[11,"partial_cmp","rubble::time","",108,[[["duration",3]],[["option",4],["ordering",4]]]],[11,"lt","","",108,[[["duration",3]]]],[11,"le","","",108,[[["duration",3]]]],[11,"gt","","",108,[[["duration",3]]]],[11,"ge","","",108,[[["duration",3]]]],[11,"add","","",108,[[]]],[11,"add","","",108,[[]]],[11,"add","","",109,[[["duration",3]]]],[11,"add_assign","","",108,[[]]],[11,"add_assign","","",109,[[["duration",3]]]],[11,"sub_assign","rubble::gatt::characteristic","Disables all flags enabled in the set.",26,[[["properties",3]]]],[11,"sub_assign","rubble::link::ad_structure","Disables all flags enabled in the set.",50,[[["flags",3]]]],[11,"sub_assign","rubble::link","Disables all flags enabled in the set.",73,[[["featureset",3]]]],[11,"sub_assign","rubble::security","Disables all flags enabled in the set.",106,[[["keydistribution",3]]]],[11,"sub_assign","rubble::time","",108,[[]]],[11,"sub_assign","","",109,[[["duration",3]]]],[11,"not","rubble::gatt::characteristic","Returns the complement of this set of flags.",26,[[],["properties",3]]],[11,"not","rubble::link::ad_structure","Returns the complement of this set of flags.",50,[[],["flags",3]]],[11,"not","rubble::link","Returns the complement of this set of flags.",73,[[],["featureset",3]]],[11,"not","rubble::security","Returns the complement of this set of flags.",106,[[],["keydistribution",3]]],[11,"bitand","rubble::gatt::characteristic","Returns the intersection between the two sets of flags.",26,[[["properties",3]],["properties",3]]],[11,"bitand","rubble::link::ad_structure","Returns the intersection between the two sets of flags.",50,[[["flags",3]],["flags",3]]],[11,"bitand","rubble::link","Returns the intersection between the two sets of flags.",73,[[["featureset",3]],["featureset",3]]],[11,"bitand","rubble::security","Returns the intersection between the two sets of flags.",106,[[["keydistribution",3]],["keydistribution",3]]],[11,"bitor","rubble::gatt::characteristic","Returns the union of the two sets of flags.",26,[[["properties",3]],["properties",3]]],[11,"bitor","rubble::link::ad_structure","Returns the union of the two sets of flags.",50,[[["flags",3]],["flags",3]]],[11,"bitor","rubble::link","Returns the union of the two sets of flags.",73,[[["featureset",3]],["featureset",3]]],[11,"bitor","rubble::security","Returns the union of the two sets of flags.",106,[[["keydistribution",3]],["keydistribution",3]]],[11,"bitxor","rubble::gatt::characteristic","Returns the left flags, but with all the right flags…",26,[[["properties",3]],["properties",3]]],[11,"bitxor","rubble::link::ad_structure","Returns the left flags, but with all the right flags…",50,[[["flags",3]],["flags",3]]],[11,"bitxor","rubble::link","Returns the left flags, but with all the right flags…",73,[[["featureset",3]],["featureset",3]]],[11,"bitxor","rubble::security","Returns the left flags, but with all the right flags…",106,[[["keydistribution",3]],["keydistribution",3]]],[11,"bitand_assign","rubble::gatt::characteristic","Disables all flags disabled in the set.",26,[[["properties",3]]]],[11,"bitand_assign","rubble::link::ad_structure","Disables all flags disabled in the set.",50,[[["flags",3]]]],[11,"bitand_assign","rubble::link","Disables all flags disabled in the set.",73,[[["featureset",3]]]],[11,"bitand_assign","rubble::security","Disables all flags disabled in the set.",106,[[["keydistribution",3]]]],[11,"bitor_assign","rubble::gatt::characteristic","Adds the set of flags.",26,[[["properties",3]]]],[11,"bitor_assign","rubble::link::ad_structure","Adds the set of flags.",50,[[["flags",3]]]],[11,"bitor_assign","rubble::link","Adds the set of flags.",73,[[["featureset",3]]]],[11,"bitor_assign","rubble::security","Adds the set of flags.",106,[[["keydistribution",3]]]],[11,"bitxor_assign","rubble::gatt::characteristic","Toggles the set of flags.",26,[[["properties",3]]]],[11,"bitxor_assign","rubble::link::ad_structure","Toggles the set of flags.",50,[[["flags",3]]]],[11,"bitxor_assign","rubble::link","Toggles the set of flags.",73,[[["featureset",3]]]],[11,"bitxor_assign","rubble::security","Toggles the set of flags.",106,[[["keydistribution",3]]]],[11,"hash","rubble::gatt::characteristic","",26,[[]]],[11,"hash","rubble::l2cap","",33,[[]]],[11,"hash","rubble::link::ad_structure","",50,[[]]],[11,"hash","rubble::link","",73,[[]]],[11,"hash","rubble::security","",106,[[]]],[11,"next","rubble::gatt","",118,[[],[["attribute",3],["option",4]]]],[11,"extend","rubble::gatt::characteristic","",26,[[["intoiterator",8]]]],[11,"extend","rubble::link::ad_structure","",50,[[["intoiterator",8]]]],[11,"extend","rubble::link","",73,[[["intoiterator",8]]]],[11,"extend","rubble::security","",106,[[["intoiterator",8]]]],[11,"from_iter","rubble::gatt::characteristic","",26,[[["intoiterator",8]],["properties",3]]],[11,"from_iter","rubble::link::ad_structure","",50,[[["intoiterator",8]],["flags",3]]],[11,"from_iter","rubble::link","",73,[[["intoiterator",8]],["featureset",3]]],[11,"from_iter","rubble::security","",106,[[["intoiterator",8]],["keydistribution",3]]],[11,"into","rubble::att","",2,[[],["uuid128",3]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",50,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",73,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",106,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",50,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",73,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",106,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",50,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",73,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",106,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link::ad_structure","",50,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::link","",73,[[["formatter",3]],["result",6]]],[11,"fmt","rubble::security","",106,[[["formatter",3]],["result",6]]],[11,"clone","rubble::att","",3,[[],["handle",3]]],[11,"clone","","",2,[[],["attuuid",4]]],[11,"clone","rubble::bytes","",13,[[]]],[11,"clone","rubble::gatt::characteristic","",26,[[],["properties",3]]],[11,"clone","","",24,[[],["appearance",4]]],[11,"clone","rubble::l2cap","",33,[[],["channel",3]]],[11,"clone","rubble::link::ad_structure","",45,[[],["adstructure",4]]],[11,"clone","","",49,[[],["serviceuuids",3]]],[11,"clone","","",50,[[],["flags",3]]],[11,"clone","rubble::link::advertising","",51,[[],["pdu",4]]],[11,"clone","","",61,[[],["connectrequestdata",3]]],[11,"clone","","",59,[[],["sleepclockaccuracy",4]]],[11,"clone","","",63,[[],["header",3]]],[11,"clone","rubble::link","",64,[[],["companyid",3]]],[11,"clone","rubble::link::data","",71,[[],["header",3]]],[11,"clone","","",66,[[],["llid",4]]],[11,"clone","rubble::link","",40,[[],["addresskind",4]]],[11,"clone","","",72,[[],["deviceaddress",3]]],[11,"clone","","",73,[[],["featureset",3]]],[11,"clone","rubble::link::llcp","",88,[[],["connectionparamrequest",3]]],[11,"clone","","",89,[[],["connectionupdatedata",3]]],[11,"clone","","",78,[[],["controlpdu",4]]],[11,"clone","","",86,[[],["controlopcode",4]]],[11,"clone","","",87,[[],["versionnumber",4]]],[11,"clone","rubble::link","",39,[[],["cmd",3]]],[11,"clone","","",41,[[],["nextupdate",4]]],[11,"clone","","",42,[[],["radiocmd",4]]],[11,"clone","rubble::phy","",99,[[],["advertisingchannel",3]]],[11,"clone","","",100,[[],["datachannel",3]]],[11,"clone","rubble::security","",101,[[],["iocapabilities",4]]],[11,"clone","","",105,[[],["authreq",3]]],[11,"clone","","",102,[[],["bondingtype",4]]],[11,"clone","","",106,[[],["keydistribution",3]]],[11,"clone","rubble::time","",108,[[],["duration",3]]],[11,"clone","","",109,[[],["instant",3]]],[11,"clone","rubble::uuid","",110,[[],["uuid16",3]]],[11,"clone","","",111,[[],["uuid32",3]]],[11,"clone","","",114,[[],["uuid128",3]]],[11,"clone","","",112,[[],["uuidkind",4]]]],"p":[[4,"Error"],[3,"Attribute"],[4,"AttUuid"],[3,"Handle"],[3,"HandleRange"],[3,"AttributeServer"],[3,"AttributeServerTx"],[8,"AttributeProvider"],[8,"ScanCallback"],[3,"Beacon"],[3,"BeaconScanner"],[8,"ToBytes"],[8,"FromBytes"],[3,"BytesOr"],[3,"ByteWriter"],[3,"ByteReader"],[8,"Config"],[3,"PublicKey"],[3,"SharedSecret"],[3,"P256Provider"],[3,"RingProvider"],[8,"EcdhProvider"],[8,"SecretKey"],[3,"InvalidPublicKey"],[4,"Appearance"],[8,"Characteristic"],[3,"Properties"],[3,"BatteryLevel"],[3,"BatteryServiceAttrs"],[3,"MidiServiceAttrs"],[8,"ChannelMapper"],[8,"ProtocolObj"],[8,"Protocol"],[3,"Channel"],[3,"ChannelData"],[3,"BleChannelMap"],[3,"L2CAPState"],[3,"Sender"],[3,"L2CAPStateTx"],[3,"Cmd"],[4,"AddressKind"],[4,"NextUpdate"],[4,"RadioCmd"],[13,"ListenAdvertising"],[13,"ListenData"],[4,"AdStructure"],[13,"ServiceData16"],[13,"ManufacturerSpecificData"],[13,"Unknown"],[3,"ServiceUuids"],[3,"Flags"],[4,"Pdu"],[13,"ConnectableUndirected"],[13,"ConnectableDirected"],[13,"NonconnectableUndirected"],[13,"ScannableUndirected"],[13,"ScanRequest"],[13,"ScanResponse"],[13,"ConnectRequest"],[4,"SleepClockAccuracy"],[4,"PduType"],[3,"ConnectRequestData"],[3,"PduBuf"],[3,"Header"],[3,"CompanyId"],[3,"Connection"],[4,"Llid"],[4,"Pdu"],[13,"DataCont"],[13,"DataStart"],[13,"Control"],[3,"Header"],[3,"DeviceAddress"],[3,"FeatureSet"],[8,"AddressFilter"],[3,"WhitelistFilter"],[3,"AdvFilter"],[3,"ScanFilter"],[4,"ControlPdu"],[13,"ChannelMapReq"],[13,"TerminateInd"],[13,"UnknownRsp"],[13,"FeatureReq"],[13,"FeatureRsp"],[13,"VersionInd"],[13,"Unknown"],[4,"ControlOpcode"],[4,"VersionNumber"],[3,"ConnectionParamRequest"],[3,"ConnectionUpdateData"],[8,"PacketQueue"],[8,"Producer"],[8,"Consumer"],[3,"Consume"],[3,"SimpleQueue"],[3,"Responder"],[8,"Transmitter"],[3,"LinkLayer"],[8,"Radio"],[3,"AdvertisingChannel"],[3,"DataChannel"],[4,"IoCapabilities"],[4,"BondingType"],[8,"SecurityLevel"],[3,"SecurityManager"],[3,"AuthReq"],[3,"KeyDistribution"],[8,"Timer"],[3,"Duration"],[3,"Instant"],[3,"Uuid16"],[3,"Uuid32"],[4,"UuidKind"],[8,"IsUuid"],[3,"Uuid128"],[3,"NoAttributes"],[3,"P256SecretKey"],[3,"RingSecretKey"],[3,"Attributes"],[3,"AllowAll"],[3,"SimpleProducer"],[3,"SimpleConsumer"],[3,"NoSecurity"],[3,"SecureConnections"]]},\
"rubble_nrf5x":{"doc":"A Rubble BLE driver for the nRF51/nRF52-series radios.","i":[[0,"radio","rubble_nrf5x","Integrated 2.4 GHz radio with BLE support.",null,null],[3,"BleRadio","rubble_nrf5x::radio","An interface to the nRF radio in BLE mode.",null,null],[6,"PacketBuffer","","A packet buffer that can hold header and payload of any…",null,null],[11,"new","","Initializes the radio in BLE mode and takes ownership of…",0,[[["packetbuffer",6],["radio",3],["ficr",3]]]],[11,"state","","Returns the current radio state.",0,[[],["state_r",6]]],[11,"configure_receiver","","Configures the Radio for (not) receiving data according to…",0,[[["radiocmd",4]]]],[11,"recv_interrupt","","Call this when the `RADIO` interrupt fires.",0,[[["linklayer",3],["instant",3]],[["option",4],["cmd",3]]]],[0,"timer","rubble_nrf5x","Generic `Timer` implementation that works with all 3…",null,null],[3,"BleTimer","rubble_nrf5x::timer","Implements Rubble\'s `Timer` trait for the timers on the…",null,null],[3,"StampSource","","A timer interface that only allows reading the current…",null,null],[8,"NrfTimerExt","","Extension trait implemented for the nRF timer peripherals.",null,null],[10,"duplicate","","",1,[[]]],[10,"init","","Initialize the timer so that it counts at a rate of 1 MHz.",1,[[]]],[10,"set_interrupt","","Configures the timer\'s interrupt to fire at the given…",1,[[["instant",3]]]],[10,"clear_interrupt","","Disables or acknowledges this timer\'s interrupt.",1,[[]]],[10,"is_pending","","Returns whether a timer interrupt is currently pending.",1,[[]]],[10,"now","","Obtains the current time as an `Instant`.",1,[[],["instant",3]]],[11,"init","","Initializes the timer.",2,[[]]],[11,"configure_interrupt","","Configures the timer interrupt to fire according to `next`.",2,[[["nextupdate",4]]]],[11,"is_interrupt_pending","","Checks whether this timer\'s interrupt is pending.",2,[[]]],[11,"clear_interrupt","","Clears a pending interrupt and disables generation of…",2,[[]]],[11,"inner","","Provides access to the raw peripheral. Use with caution.",2,[[]]],[11,"create_stamp_source","","Creates a new `StampSource` using this timer.",2,[[],["stampsource",3]]],[0,"utils","rubble_nrf5x","Useful utilities related to Rubble on the nRF52.",null,null],[5,"get_device_address","rubble_nrf5x::utils","Return the `DeviceAddress`, which is pre-programmed in the…",null,[[],["deviceaddress",3]]],[11,"from","rubble_nrf5x::radio","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"lossless_try_into","","",0,[[],["option",4]]],[11,"lossy_into","","",0,[[]]],[11,"from","rubble_nrf5x::timer","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"lossless_try_into","","",2,[[],["option",4]]],[11,"lossy_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"lossless_try_into","","",3,[[],["option",4]]],[11,"lossy_into","","",3,[[]]],[11,"tx_payload_buf","rubble_nrf5x::radio","",0,[[]]],[11,"transmit_advertising","","",0,[[["header",3],["advertisingchannel",3]]]],[11,"transmit_data","","",0,[[["header",3],["datachannel",3]]]],[11,"now","rubble_nrf5x::timer","",2,[[],["instant",3]]],[11,"now","","",3,[[],["instant",3]]]],"p":[[3,"BleRadio"],[8,"NrfTimerExt"],[3,"BleTimer"],[3,"StampSource"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);